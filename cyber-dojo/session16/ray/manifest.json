{"RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"JUnit version 4.12\n....\n1 Scenarios (1 passed)\n3 Steps (3 passed)\n0m0.223s\n\n.E\nTime: 0.498\nThere was 1 failure:\n1) testSearch(SearchWorkerTest)\norg.junit.ComparisonFailure: expected:<[Four little, five little, six little Indian]> but was:<[One little, two little, three little Indians]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat SearchWorkerTest.testSearch(SearchWorkerTest.java:10)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n\nFAILURES!!!\nTests run: 5,  Failures: 1\n\n","instructions":"A full text keywords translater \nthat translate user input to a engine recongized full text query","Search.feature":"\nFeature: search\n\nScenario: return all lines contains the user input words\nGiven the text content:\n    |One little, two little, three little Indians|\n    |Four little, five little, six little Indians|\n    |Seven little, eight little, nine little Indians|\n    |Ten little Indian boys.|\nWhen I search <Indian>\nThen the result will be: \n    |One little, two little, three little Indians|\n    |Four little, five little, six little Indians|\n    |Seven little, eight little, nine little Indians|\n    |Ten little Indian boys.|\n\n","SearchStepDef.java":"import java.util.*;\nimport org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.*;\n\npublic class SearchStepDef {\n    List<String> results;\n\n    @Given(\"^the text content:$\")\n    public void theTextContent(List<String> text) throws Throwable {\n        \n    }\n    \n\n    @When(\"^I search <([^>]*)>$\")\n    public void iSearchIndian(String input) throws Throwable {\n        SearchWorker worker = new SearchWorker();\n        results = worker.search(input);\n    }\n  \n    @Then(\"^the result will be:$\")\n    public void theResultWillBe(List<String> expected) throws Throwable {\n        assertEquals(expected, results);\n    } \n}\n","SearchWorker.java":"import java.util.*;\npublic class SearchWorker {\n    public List<String> search(String input) {\n        return Arrays.asList(\n        \"One little, two little, three little Indians\", \n        \"Four little, five little, six little Indians\", \n        \"Seven little, eight little, nine little Indians\",\n         \"Ten little Indian boys.\");\n    }\n}","SearchWorkerTest.java":"import java.util.*;\nimport org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class SearchWorkerTest {\n\n    @Test\n    public void testSearch() {\n        List<String> results = new SearchWorker().search(\"five\");\n        assertEquals(\"Four little, five little, six little Indian\", results.get(0));\n    }\n}"}