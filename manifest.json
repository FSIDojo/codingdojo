{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"StringCalculator.java:8: error: cannot find symbol\n        if(number.split(\",\").size() == 1){\n                            ^\n  symbol:   method size()\n  location: class String[]\n1 error\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void test_add_with_null() {\n        int expected = 0;\n        String numbers = \"\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void test_add_with_one() {\n        int expected = 1;\n        String numbers = \"1\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n}\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    public static int add(String number) {\n        if(number == null || number == \"\"){\n            return 0;\n        }\n        if(number.split(\",\").size() == 1){\n            return Integer.valueOf(number);\n        }\n        return 6 * 9;\n    }\n}\n"}