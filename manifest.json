{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n..E.E.E.E..E\nTime: 0.023\nThere were 5 failures:\n1) addWithMultipleInput(StringCalculatorTest)\njava.util.regex.PatternSyntaxException: Dangling meta character '*' near index 0\n*,{2}*\n^\n\tat java.util.regex.Pattern.error(Pattern.java:1955)\n\tat java.util.regex.Pattern.sequence(Pattern.java:2123)\n\tat java.util.regex.Pattern.expr(Pattern.java:1996)\n\tat java.util.regex.Pattern.compile(Pattern.java:1696)\n\tat java.util.regex.Pattern.<init>(Pattern.java:1351)\n\tat java.util.regex.Pattern.compile(Pattern.java:1028)\n\tat java.util.regex.Pattern.matches(Pattern.java:1133)\n\tat java.lang.String.matches(String.java:2108)\n\tat StringCalculator.add(StringCalculator.java:11)\n\tat StringCalculatorTest.addWithMultipleInput(StringCalculatorTest.java:33)\n2) addWithMultipleInputSplittedByNewLineNotOk(StringCalculatorTest)\njava.util.regex.PatternSyntaxException: Dangling meta character '*' near index 0\n*,{2}*\n^\n\tat java.util.regex.Pattern.error(Pattern.java:1955)\n\tat java.util.regex.Pattern.sequence(Pattern.java:2123)\n\tat java.util.regex.Pattern.expr(Pattern.java:1996)\n\tat java.util.regex.Pattern.compile(Pattern.java:1696)\n\tat java.util.regex.Pattern.<init>(Pattern.java:1351)\n\tat java.util.regex.Pattern.compile(Pattern.java:1028)\n\tat java.util.regex.Pattern.matches(Pattern.java:1133)\n\tat java.lang.String.matches(String.java:2108)\n\tat StringCalculator.add(StringCalculator.java:11)\n\tat StringCalculatorTest.addWithMultipleInputSplittedByNewLineNotOk(StringCalculatorTest.java:45)\n3) addWithTwoInput(StringCalculatorTest)\njava.util.regex.PatternSyntaxException: Dangling meta character '*' near index 0\n*,{2}*\n^\n\tat java.util.regex.Pattern.error(Pattern.java:1955)\n\tat java.util.regex.Pattern.sequence(Pattern.java:2123)\n\tat java.util.regex.Pattern.expr(Pattern.java:1996)\n\tat java.util.regex.Pattern.compile(Pattern.java:1696)\n\tat java.util.regex.Pattern.<init>(Pattern.java:1351)\n\tat java.util.regex.Pattern.compile(Pattern.java:1028)\n\tat java.util.regex.Pattern.matches(Pattern.java:1133)\n\tat java.lang.String.matches(String.java:2108)\n\tat StringCalculator.add(StringCalculator.java:11)\n\tat StringCalculatorTest.addWithTwoInput(StringCalculatorTest.java:27)\n4) addWithOneInput(StringCalculatorTest)\njava.util.regex.PatternSyntaxException: Dangling meta character '*' near index 0\n*,{2}*\n^\n\tat java.util.regex.Pattern.error(Pattern.java:1955)\n\tat java.util.regex.Pattern.sequence(Pattern.java:2123)\n\tat java.util.regex.Pattern.expr(Pattern.java:1996)\n\tat java.util.regex.Pattern.compile(Pattern.java:1696)\n\tat java.util.regex.Pattern.<init>(Pattern.java:1351)\n\tat java.util.regex.Pattern.compile(Pattern.java:1028)\n\tat java.util.regex.Pattern.matches(Pattern.java:1133)\n\tat java.lang.String.matches(String.java:2108)\n\tat StringCalculator.add(StringCalculator.java:11)\n\tat StringCalculatorTest.addWithOneInput(StringCalculatorTest.java:21)\n5) addWithMultipleInputSplittedByNewLine(StringCalculatorTest)\njava.util.regex.PatternSyntaxException: Dangling meta character '*' near index 0\n*,{2}*\n^\n\tat java.util.regex.Pattern.error(Pattern.java:1955)\n\tat java.util.regex.Pattern.sequence(Pattern.java:2123)\n\tat java.util.regex.Pattern.expr(Pattern.java:1996)\n\tat java.util.regex.Pattern.compile(Pattern.java:1696)\n\tat java.util.regex.Pattern.<init>(Pattern.java:1351)\n\tat java.util.regex.Pattern.compile(Pattern.java:1028)\n\tat java.util.regex.Pattern.matches(Pattern.java:1133)\n\tat java.lang.String.matches(String.java:2108)\n\tat StringCalculator.add(StringCalculator.java:11)\n\tat StringCalculatorTest.addWithMultipleInputSplittedByNewLine(StringCalculatorTest.java:39)\n\nFAILURES!!!\nTests run: 7,  Failures: 5\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    private static final String COMMA_SPLITTER = \",\";\n\n    public static int add(String input) {\n       if(input == null || input.length() == 0){ \n           return 0;\n       }\n       input = input.replace(\"\\n\", COMMA_SPLITTER);\n       if(input.matches(\"*,{2}*\")){  \n          return -1;\n       }\n       String[] splittedInput = input.split(COMMA_SPLITTER);\n       return addArgs(splittedInput);\n    }\n\n    public static int addArgs(String... number){\n        int result = 0; \n        for(String temp : number){\n           result += Integer.valueOf(temp);\n       }\n       return result;\n    }\n}\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void addWithNull() {\n        String input = null; \n        assertEquals(0, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithEmpty() {\n        String input = \"\";\n        assertEquals(0, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithOneInput() {\n        String input = \"1\";\n        assertEquals(1, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithTwoInput() {\n        String input = \"1,2\";\n        assertEquals(3, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithMultipleInput() {\n        String input = \"1,2,3\";\n        assertEquals(6, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithMultipleInputSplittedByNewLine() {\n        String input = \"1\\n2,3\";\n        assertEquals(6, StringCalculator.add(input));\n    }\n     \n    @Test\n    public void addWithMultipleInputSplittedByNewLineNotOk() {\n        String input = \"1\\n,\";\n        assertEquals(-1, StringCalculator.add(input));\n    }\n}\n"}