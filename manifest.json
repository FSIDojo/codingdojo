{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"StringCalculator.java:8: error: illegal start of expression\n       if (validateResult < =0 ){\n                            ^\n1 error\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    private static final String COMMA_SPLITTER = \",\";\n\n    public static int add(String input) {\n       int validateResult = validateInput(input);\n       if (validateResult < =0 ){\n          return validateResult;\n       }\n\n       String[] splittedInput = input.split(COMMA_SPLITTER);\n       return addArgs(splittedInput);\n    }\n\n    private static int validateInput(String input){\n       if(input == null || input.length() == 0){ \n           return 0;\n       }\n       input = input.replace(\"\\n\", COMMA_SPLITTER);\n       if(input.matches(\".*?,{2}.*?\")){  \n          return -1;\n       }\n    }\n\n    private static int addArgs(String... number){\n        int result = 0; \n        for(String temp : number){\n           result += Integer.valueOf(temp);\n       }\n       return result;\n    }\n}\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void addWithNull() {\n        String input = null; \n        assertEquals(0, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithEmpty() {\n        String input = \"\";\n        assertEquals(0, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithOneInput() {\n        String input = \"1\";\n        assertEquals(1, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithTwoInput() {\n        String input = \"1,2\";\n        assertEquals(3, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithMultipleInput() {\n        String input = \"1,2,3\";\n        assertEquals(6, StringCalculator.add(input));\n    }\n\n    @Test\n    public void addWithMultipleInputSplittedByNewLine() {\n        String input = \"1\\n2,3\";\n        assertEquals(6, StringCalculator.add(input));\n    }\n     \n    @Test\n    public void addWithMultipleInputSplittedByNewLineNotOk() {\n        String input = \"1\\n,\";\n        assertEquals(-1, StringCalculator.add(input));\n    }\n}\n"}