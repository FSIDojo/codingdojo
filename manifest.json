{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.E...\nTime: 0.018\nThere was 1 failure:\n1) zero_from_empty(StringCalculatorTest)\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Integer.parseInt(Integer.java:592)\n\tat java.lang.Integer.valueOf(Integer.java:766)\n\tat StringCalculator.add(StringCalculator.java:14)\n\tat StringCalculatorTest.zero_from_empty(StringCalculatorTest.java:9)\n\nFAILURES!!!\nTests run: 4,  Failures: 1\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n    StringCalculator caculator = new StringCalculator();\n\n    @Test\n    public void zero_from_empty() {\n        assertEquals(0, caculator.add(\"\"));\n    }\n\n    @Test\n    public void one_number_from_single_string() {\n        assertEquals(1, caculator.add(\"1\"));\n        assertEquals(2, caculator.add(\"2\"));\n    }\n\n    @Test\n    public void sum_number_from_two_string() {\n        assertEquals(3, caculator.add(\"1,2\"));\n    }\n\n    @Test\n    public void sum_number_from_three_string() {\n        assertEquals(10, caculator.add(\"1,2,7\"));\n    }\n    \n}\n","StringCalculator.java":"\npublic class StringCalculator{\n    static final String SEPERATOR = \",\";\n\n    public static int add(String numbers) {\n        if (!\"\".equals(numbers)) {\n            String[] numberArray = numbers.split(SEPERATOR);\n            int result = 0;\n            for (String number : numberArray) {\n                result += Integer.parseInt(number);\n            }\n            return result;\n        }\n        return Integer.valueOf(\"\");\n    }\n}\n"}