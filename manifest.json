{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n..E......\nTime: 0.029\nThere was 1 failure:\n1) test_add_with_new_line_v3(StringCalculatorTest)\njava.lang.NumberFormatException: For input string: \"//\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Integer.parseInt(Integer.java:569)\n\tat java.lang.Integer.valueOf(Integer.java:766)\n\tat StringCalculator.add(StringCalculator.java:20)\n\tat StringCalculator.add(StringCalculator.java:13)\n\tat StringCalculatorTest.test_add_with_new_line_v3(StringCalculatorTest.java:66)\n\nFAILURES!!!\nTests run: 8,  Failures: 1\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void test_add_with_null() {\n        int expected = 0;\n        String numbers = null;\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void test_add_with_empty() {\n        int expected = 0;\n        String numbers = \"\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }    \n\n    @Test\n    public void test_add_with_one() {\n        int expected = 1;\n        String numbers = \"1\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n \n    @Test\n    public void test_add_with_two() {\n        int expected = 3;\n        String numbers = \"1,2\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void test_add_with_unknown_amount_of_numbers(){\n        int expected = 6;\n        String numbers = \"1,2,3\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void test_add_with_new_line(){\n        int expected = 6;\n        String numbers = \"1\\n2,3\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void test_add_with_new_line_v2(){\n        int expected = 6;\n        String numbers = \"1\\n2\\n3\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void test_add_with_new_line_v3(){\n        int expected = 3;\n        String numbers = \"//;\\n1;2\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n}\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    public static int add(String number) {\n        if(number == null || \"\".equals(number)){\n            return 0;\n        }\n        String delimiter = \",\";\n        if(number.startsWith(\"//\")){\n           delimiter = number.charAt(2)+\"\";\n        }\n        number = number.replace(\"\\n\",delimiter);\n        return add(number.split(delimiter));\n    }\n\n\n    private static int add(String... numbers){\n        int ret = 0;\n        for(String number : numbers){\n            ret += Integer.valueOf(number);            \n        }\n        return ret;\n    }\n}\n"}