{"HikerTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class HikerTest {\n\n    @Test\n    public void life_the_universe_and_everything() {\n        int expected = 0;\n        int actual = Hiker.answer(null);\n        assertEquals(expected, actual);\n    }\n\n\n    @Test\n    public void one() {\n        int expected = 1;\n        int actual = Hiker.answer(\"1\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void oneAddOne() {\n        int expected = 2;\n        int actual = Hiker.answer(\"1,1\");\n        assertEquals(expected, actual);\n    }\n}\n","Hiker.java":"\npublic class Hiker {\n\n    public static int answer(String str) {\n        if(null == str) {\n            return 0;\n        } else {\n            return 1;\n        }\n        \n    }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n..E.\nTime: 0.018\nThere was 1 failure:\n1) oneAddOne(HikerTest)\njava.lang.AssertionError: expected:<2> but was:<1>\n\tat HikerTest.oneAddOne(HikerTest.java:24)\n\nFAILURES!!!\nTests run: 3,  Failures: 1\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n"}