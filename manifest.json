{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n..E..\nTime: 0.014\nThere was 1 failure:\n1) get_x_add_y_add_z_with_two_delimater(StringCalculatorTest)\njava.lang.NumberFormatException: For input string: \"1\n2\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Integer.parseInt(Integer.java:580)\n\tat java.lang.Integer.valueOf(Integer.java:766)\n\tat StringCalculator.add(StringCalculator.java:9)\n\tat StringCalculatorTest.get_x_add_y_add_z_with_two_delimater(StringCalculatorTest.java:23)\n\nFAILURES!!!\nTests run: 4,  Failures: 1\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    public static int add(String param) {\n        int result=0;\n        if (!param.equals(\"\")) {\n            String[] digits = param.split(\",\");\n            for(String i: digits){\n                result += Integer.valueOf(i);\n            }\n        }\n        return result;\n    }\n}\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void empty_string_get_0() {\n        assertEquals(0, new StringCalculator().add(\"\"));\n    }\n\n    @Test\n    public void single_string_get_x() {\n        assertEquals(1, new StringCalculator().add(\"1\"));\n    }\n\n    @Test\n    public void two_string_get_x_add_y() {\n        assertEquals(3, new StringCalculator().add(\"1,2\"));\n    }\n\n    @Test\n    public void get_x_add_y_add_z_with_two_delimater() {\n        assertEquals(6, new StringCalculator().add(\"1\\n2,3\"));\n    }\n}\n"}