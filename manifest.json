{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"NumberParser.java:10: warning: [unchecked] unchecked call to add(E) as a member of the raw type ArrayList\n                list.add(Integer.parseInt(str));\n                        ^\n  where E is a type-variable:\n    E extends Object declared in class ArrayList\nNumberParser.java:12: error: incompatible types: Object[] cannot be converted to int[]\n            return list.toArray();\n                               ^\n1 error\n1 warning\n","instructions":"String calculator ","AcceptanceTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class AcceptanceTest {\n\n    @Test\n    public void shoud_add_numbers_in_string() {\n        StringCalculator calculator = new StringCalculator(null);\n        assertEquals(3, calculator.add(\"1,2\")); \n    }\n\n}","StingCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class StingCalculatorTest {\n\n    @Test\n    public void should_parse_number_from_text_and_sum () {\n        //Given\n        NumberParser parser = mock(NumberParser.class);\n        int[] shouldReturn = new int[]{2,3};\n        when(parser.parse(\"2,3\")).thenReturn(shouldReturn);\n        StringCalculator calculator = new StringCalculator(parser);\n        //When\n        int result = calculator.add(\"2,3\");\n        //Then\n        assertEquals(result, 5);\n    }\n\n    @Test\n    public void should_parse_number_from_text_and_sum2 () {\n        //Given\n        NumberParser parser = mock(NumberParser.class);\n        int[] shouldReturn = new int[]{};\n        when(parser.parse(\"\")).thenReturn(shouldReturn);\n        StringCalculator calculator = new StringCalculator(parser);\n        //When\n        int result = calculator.add(\"\");\n        //Then\n        assertEquals(result, 0);\n    }\n\n    @Test\n    public void should_parse_number_from_text_and_sum3 () {\n        //Given\n        NumberParser parser = mock(NumberParser.class);\n        int[] shouldReturn = new int[]{1};\n        when(parser.parse(\"1\")).thenReturn(shouldReturn);\n        StringCalculator calculator = new StringCalculator(parser);\n        //When\n        int result = calculator.add(\"1\");\n        //Then\n        assertEquals(result, 1);\n    }\n}","NumberParser.java":"import java.util.*;\npublic class NumberParser {\n    public int[] parse(String text) {\n        if(text.equals(\"\")) {\n            return new int[0];\n        } else if (text.contains(\",\")) {\n            String[] res = text.split(\",\");\n            ArrayList list = new ArrayList();\n            for (String str : res ) {\n                list.add(Integer.parseInt(str));\n            }\n            return list.toArray();\n        }\n        return null;\n    }\n}","StringCalculator.java":"\npublic class StringCalculator {\n    private NumberParser parser;\n    \n    public StringCalculator(NumberParser parser) {\n        this.parser = parser;\n    }\n\n    public int add(String text) {\n        int[] resultArray = null;\n        int result = 0;\n        if (parser != null) {\n            resultArray = parser.parse(text);\n            for(int a : resultArray) {\n                result += a; \n            }\n            return result ;\n        } else {\n            return 3;\n        }\n\n\n    }\n}","NumberParserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\nimport java.util.*;\n\npublic class NumberParserTest {\n\n    @Test\n    public void testParser() {\n        //Given\n        NumberParser parser = new NumberParser();\n        //When\n        int[] resultArray = parser.parse(\"\");\n        //Then\n        assertArrayEquals(resultArray, new int[0]);\n    }\n\n    @Test\n    public void testParser2() {\n        //Given\n        NumberParser parser = new NumberParser();\n        //When\n        int[] resultArray = parser.parse(\"1,2\");\n        //Then\n        assertArrayEquals(resultArray, new int[]{1,2});\n    }\n\n}"}