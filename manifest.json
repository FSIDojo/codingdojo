{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"StringCalculator.java:20: error: cannot find symbol\n            if (i.starts(\"-\")) {\n                 ^\n  symbol:   method starts(String)\n  location: variable i of type String\n1 error\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    public int add(String param) {\n        if (param.equals(\"\")) {\n            return 0;\n        }\n        String delimiter = \",|\\n\";\n        if(param.startsWith(\"//\")){\n            delimiter = param.substring(2,3);\n            param = param.substring(4);\n        }\n        return sumByDelimiter(param, delimiter);\n    }\n\n    private int sumByDelimiter(String numbers, String delimiter) {\n        int result=0;\n        String[] digits = numbers.split(delimiter);\n        for(String i : digits){\n            if (i.starts(\"-\")) {\n                throw new RuntimeException(\"negaives not allowed -3\");\n            }\n\n            result += Integer.valueOf(i);\n        }\n        return result;\n    } \n}\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport org.junit.rules.ExpectedException;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void empty_string_get_0() {\n        assertEquals(0, new StringCalculator().add(\"\"));\n    }\n\n    @Test\n    public void single_string_get_x() {\n        assertEquals(1, new StringCalculator().add(\"1\"));\n    }\n\n    @Test\n    public void two_string_get_x_add_y() {\n        assertEquals(3, new StringCalculator().add(\"1,2\"));\n    }\n\n    @Test\n    public void get_x_add_y_add_z_with_two_delimiter() {\n        assertEquals(6, new StringCalculator().add(\"1\\n2,3\"));\n    }\n\n    @Test\n    public void could_define_delimiter() {\n        assertEquals(4, new StringCalculator().add(\"//;\\n1;3\"));\n    }\n\n    @Test(expected=Exception.class)\n    public void throw_exception_if_not_define_delimiter() {\n        int fail = new StringCalculator().add(\"1;3\");\n        fail(\"Should fail if not define different delimiter\");\n    }\n\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n\n    @Test\n    public void throw_exception_if_has_negatives() {\n        thrown.expectMessage(\"negaives not allowed -3\");\n        int fail = new StringCalculator().add(\"1,-3\");\n    }\n}\n"}