{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.......\nTime: 0.042\n\nOK (7 tests)\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculator.java":"\npublic class StringCalculator{\n\n    public static int add(String numbers) {\n        if (\"\".equals(numbers)) {\n            return 0;\n        }\n        if(numbers.contains(\"-\")){\n            throw new RuntimeException(\"negatives not allowed\");\n        }\n        return addArray(purky(numbers));\n    }\n    \n    public static String[] purky(String numbers){    \n        String splitChar = \",\";\n        if (numbers.startsWith(\"//\")) {\n            splitChar = numbers.charAt(2) + \"\";\n            numbers = numbers.substring(4);\n        }\n        return numbers.split(splitChar + \"|\\n\");\n    }        \n\n    public static int addArray(String[] numbers){\n        int result = 0;\n        for(String temp:numbers){\n            result += Integer.valueOf(temp);\n        }\n        return result;\n    }\n}\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport org.junit.rules.ExpectedException;\n\npublic class StringCalculatorTest {\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n\n    @Test\n    public void space() {\n        int expected = 0;\n        int actual = StringCalculator.add(\"\");\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void one() {\n        int expected = 1;\n        int actual = StringCalculator.add(\"1\");\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void oneTwo() {\n        int expected = 3;\n        int actual = StringCalculator.add(\"1,2\");\n        assertEquals(expected, actual);\n    }\n    \n    @Test\n    public void add_with_new_line() {\n        int actual = StringCalculator.add(\"1\\n2,3\");\n        assertEquals(6, actual);\n    }\n\n    @Test\n    public void add_with_delimiter() {\n        int actual = StringCalculator.add(\"//;\\n1;2\");\n        assertEquals(3, actual);\n    }\n    \n    @Test(expected=Exception.class)\n    public void add_with_delimiter_issue() {\n        int actual = StringCalculator.add(\"1;2\");\n    }\n\n    @Test\n    public void add_with_delimiter_negative() {\n        thrown.expect(RuntimeException.class);\n        thrown.expectMessage(\"negatives not allowed\");\n        StringCalculator.add(\"-1,2\");\n    }\n\n\n}\n"}