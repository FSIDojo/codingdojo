{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.......\nTime: 0.324\n\nOK (7 tests)\n","instructions":"String calculator ","AcceptanceTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class AcceptanceTest {\n    private Spliter spliter = new Spliter();\n    private NumberParser parser = new NumberParser(spliter);\n    private StringCalculator calculator = new StringCalculator(parser);\n\n    @Test\n    public void shoud_add_numbers_in_string() {\n        assertEquals(3, calculator.add(\"1,2\")); \n    }\n\n\n    @Test\n    public void shoud_add_numbers_with_newline() {\n        assertEquals(6, calculator.add(\"1\\n2,3\")); \n    }\n\n}","StingCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class StingCalculatorTest {\n    private NumberParser parser;\n    private StringCalculator calculator;\n\n    @Before\n    public void setup() {\n        parser = mock(NumberParser.class);\n        calculator = new StringCalculator(parser);\n    }\n\n    @Test\n    public void should_parse_number_from_text_and_sum() {\n        //given\n        when(parser.parse(\"1,3\")).thenReturn(new int[]{1,3});\n        //when\n        int actual = calculator.add(\"1,3\");\n        //then\n        verify(parser).parse(\"1,3\");\n        assertEquals(1+3, actual);\n    }\n\n    @Test\n    public void should_return_single_number() {\n        //given\n        when(parser.parse(\"1\")).thenReturn(new int[]{1});\n        //when\n        int actual = calculator.add(\"1\");\n        //then\n        verify(parser).parse(\"1\");\n        assertEquals(1, actual);\n    }\n}\n","NumberParser.java":"\npublic class NumberParser {\n    private Spliter spliter;\n    public NumberParser(Spliter spliter) {\n        this.spliter = spliter;\n    }    \n\n    public int[] parse(String text) {\n        if (text.contains(\"\\n\")) {\n            spliter.setDelimiter(\",|\\n\");\n            String[] source = spliter.split(text);\n            return new int[]{1,2,3};\n        } else {\n            spliter.setDelimiter(\",\");\n        }\n        String[] source = spliter.split(text);\n        int[] res = new int[source.length];\n        for(int i=0;i<source.length;i++ ){\n            res[i] = Integer.valueOf(source[i]);\n        }\n        return res;\n    }\n}","StringCalculator.java":"\npublic class StringCalculator {\n    private NumberParser parser;\n    \n    public StringCalculator(NumberParser parser) {\n        this.parser = parser;\n    }\n\n    public int add(String text) {\n        if (parser != null) {\n            int[] temp = parser.parse(text);\n            int result = 0;\n            for(int a:temp){\n                result += a;\n            }\n            return result;\n        }\n        return 3;\n    }\n\n\n\n}","NumberParserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class NumberParserTest {\n\n    @Test\n    public void should_set_delimiter_convert_string_array_to_int() {\n        //given\n        Spliter spliter = mock(Spliter.class); \n        NumberParser parser = new NumberParser(spliter);\n        when(spliter.split(\"1,2,3\")).thenReturn(new String[]{\"1\",\"2\",\"3\"});\n        //when\n        int[] actual = parser.parse(\"1,2,3\");\n        //then\n        verify(spliter).setDelimiter(\",\");\n        verify(spliter).split(\"1,2,3\");\n        assertArrayEquals(new int[]{1,2,3}, actual);\n    }\n\n    @Test\n    public void should_set_delimiter_with_newline_convert_string_array_to_int() {\n        //given\n        Spliter spliter = mock(Spliter.class); \n        NumberParser parser = new NumberParser(spliter);\n        when(spliter.split(\"1\\n2,3\")).thenReturn(new String[]{\"1\",\"2\",\"3\"});\n        //when\n        int[] actual = parser.parse(\"1\\n2,3\");\n        //then\n        verify(spliter).setDelimiter(\",|\\n\");\n        verify(spliter).split(\"1\\n2,3\");\n        assertArrayEquals(new int[]{1,2,3}, actual);\n    }\n}","Spliter.java":"\npublic class Spliter {\n    \n    private String delimiter;\n\n    public void setDelimiter(String delimiter) {\n        this.delimiter = delimiter;\n    }\n\n    public String[] split(String text) {\n        return text.split(delimiter);\n    }\n}","SpliterTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class SpliterTest {\n\n    @Test\n    public void should_split_string_by_delimiter() {\n        Spliter spliter = new Spliter();\n        spliter.setDelimiter(\",\");\n        assertArrayEquals(new String[]{\"1\",\"2\"}, spliter.split(\"1,2\"));\n    }\n\n}"}