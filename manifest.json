{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"StingCalculatorTest.java:11: error: '.class' expected\n        when(parse.parse(\"1,2\")).thenReturn(int[]{1,2});\n                                                 ^\nStingCalculatorTest.java:11: error: ';' expected\n        when(parse.parse(\"1,2\")).thenReturn(int[]{1,2});\n                                                  ^\nStingCalculatorTest.java:11: error: illegal start of expression\n        when(parse.parse(\"1,2\")).thenReturn(int[]{1,2});\n                                                   ^\nStingCalculatorTest.java:11: error: ';' expected\n        when(parse.parse(\"1,2\")).thenReturn(int[]{1,2});\n                                                    ^\nStingCalculatorTest.java:11: error: illegal start of type\n        when(parse.parse(\"1,2\")).thenReturn(int[]{1,2});\n                                                      ^\nStingCalculatorTest.java:16: error: invalid method declaration; return type required\n        AssertEqual(result, 3);\n        ^\nStingCalculatorTest.java:16: error: <identifier> expected\n        AssertEqual(result, 3);\n                          ^\nStingCalculatorTest.java:16: error: illegal start of type\n        AssertEqual(result, 3);\n                            ^\nStingCalculatorTest.java:18: error: class, interface, or enum expected\n}\n^\n9 errors\n","instructions":"String calculator ","AcceptanceTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class AcceptanceTest {\n\n    @Test\n    public void shoud_add_numbers_in_string() {\n        StringCalculator calculator = new StringCalculator(null);\n        assertEquals(3, calculator.add(\"1,2\")); \n    }\n\n}","StingCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class StingCalculatorTest {\n\n    @Test\n    public void should_parse_number_from_text_and_sum () {\n        //Given\n        NumberParser parser = mock(NumberParser.class);\n        when(parse.parse(\"1,2\")).thenReturn(int[]{1,2});\n        StringCalculator calculator = new StringCalculator(parser);\n        //When\n        int result = calculator.add(\"1,2\");\n        //Then\n        AssertEqual(result, 3);\n    }\n}\n","NumberParser.java":"\npublic class NumberParser {\n    public int[] parse(String text) {\n        return null;\n    }\n}","StringCalculator.java":"\npublic class StringCalculator {\n    private NumberParser parser;\n    \n    public StringCalculator(NumberParser parser) {\n        this.parser = parser;\n    }\n\n    public int add(String text) {\n        if (parser != null) {\n            parser.parse(text);\n        }\n        return 3;\n    }\n}"}