{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"StringCalculator.java:20: error: cannot find symbol\n            String[] numberArray = numbers.split(\"\\n\");\n                                   ^\n  symbol:   variable numbers\n  location: class StringCalculator\nStringCalculator.java:21: error: variable number is already defined in method valueOf(String)\n            for (String number : numberArray) {\n                        ^\n2 errors\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n    StringCalculator caculator = new StringCalculator();\n\n    @Test\n    public void zero_from_empty() {\n        assertEquals(0, caculator.add(\"\"));\n    }\n\n    @Test\n    public void one_number_from_single_string() {\n        assertEquals(1, caculator.add(\"1\"));\n        assertEquals(2, caculator.add(\"2\"));\n    }\n\n    @Test\n    public void sum_number_from_two_string() {\n        assertEquals(3, caculator.add(\"1,2\"));\n    }\n\n    @Test\n    public void sum_number_from_three_string() {\n        assertEquals(10, caculator.add(\"1,2,7\"));\n    }\n\n    @Test\n    public void should_accept_newline_seperator() {\n        assertEquals(3, caculator.add(\"1\\n2\"));\n        //assertEquals(10, caculator.add(\"1\\n2\\n7\"));\n        //assertEquals(10, caculator.add(\"1\\n2,7\"));\n    }\n    \n}\n","StringCalculator.java":"\npublic class StringCalculator{\n    static final String SEPERATOR = \",\";\n\n    public int add(String numbers) {\n        String[] numberArray = numbers.split(SEPERATOR);\n        int result = 0;\n        for (String number : numberArray) {\n            result += valueOf(number);\n        }\n        return result;\n    }\n\n    private int valueOf(String number) {\n        int result = 0;\n        if (!\"\".equals(number)) {\n            return Integer.parseInt(number);\n        }\n        if (number.contains(\"\\n\")) {\n            String[] numberArray = numbers.split(\"\\n\");\n            for (String number : numberArray) {\n                result += valueOf(number);\n            }\n            return result;\n        }\n        return 0;        \n    }\n}\n"}