{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.....\nTime: 0.019\n\nOK (5 tests)\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void test_add_with_null() {\n        int expected = 0;\n        String numbers = null;\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void test_add_with_empty() {\n        int expected = 0;\n        String numbers = \"\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }    \n\n    @Test\n    public void test_add_with_one() {\n        int expected = 1;\n        String numbers = \"1\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n \n    @Test\n    public void test_add_with_two() {\n        int expected = 3;\n        String numbers = \"1,2\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void test_add_with_unknown_amount_of_numbers(){\n        int expected = 6;\n        String numbers = \"1,2,3\";\n        int actual = StringCalculator.add(numbers);\n        assertEquals(expected, actual);\n    }\n\n}\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    public static int add(String number) {\n        if(number == null || \"\".equals(number)){\n            return 0;\n        }\n\n        return add(number.split(\",\"));\n    }\n\n    private static int add(String... numbers){\n        int ret = 0;\n\n        for(String number : numbers){\n            ret += Integer.valueOf(number);            \n        }\n\n        return ret;\n    }\n}\n"}