{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"StringCalculator.java:10: error: incompatible types: String cannot be converted to int\n           return splittedInput[0];\n                               ^\nStringCalculator.java:12: error: incompatible types: String cannot be converted to int\n           return  splittedInput[0] + splittedInput[1];\n                                    ^\n2 errors\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    public static int add(String input) {\n       if(input == null || input.length() == 0){ \n           return 0;\n       }\n       String[] splittedInput = input.split(\",\");\n       if (splittedInput.length == 1)\n           return splittedInput[0];\n       else if (splittedInput.length == 2) \n           return  splittedInput[0] + splittedInput[1];\n    }\n}\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void addWithNull() {\n        String input = null;\n        int expected = 0;\n        int actual = StringCalculator.add(input);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void addWithEmpty() {\n        String input = \"\";\n        int expected = 0;\n        int actual = StringCalculator.add(input);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void addWithOneInput() {\n        String input = \"1\";\n        int expected = 1;\n        int actual = StringCalculator.add(input);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void addWithTowInput() {\n        String input = \"1,2\";\n        int expected = 3;\n        int actual = StringCalculator.add(input);\n        assertEquals(expected, actual);\n    }\n}\n"}