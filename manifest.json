{"output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.E.E.E.E.E.E.E.E\nTime: 0.023\nThere were 8 failures:\n1) one(StringCalTest)\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.String.substring(String.java:1918)\n\tat StringCal.answer(StringCal.java:10)\n\tat StringCalTest.one(StringCalTest.java:17)\n2) zero(StringCalTest)\njava.lang.StringIndexOutOfBoundsException: String index out of range: -2\n\tat java.lang.String.substring(String.java:1918)\n\tat StringCal.answer(StringCal.java:10)\n\tat StringCalTest.zero(StringCalTest.java:9)\n3) spaceAndOne(StringCalTest)\njava.lang.AssertionError: expected:<3> but was:<2>\n\tat StringCalTest.spaceAndOne(StringCalTest.java:37)\n4) oneAnd(StringCalTest)\njava.lang.AssertionError: expected:<1> but was:<0>\n\tat StringCalTest.oneAnd(StringCalTest.java:31)\n5) dynamicDelimiter(StringCalTest)\njava.lang.AssertionError: expected:<6> but was:<0>\n\tat StringCalTest.dynamicDelimiter(StringCalTest.java:56)\n6) anyStr(StringCalTest)\njava.lang.AssertionError: expected:<10> but was:<9>\n\tat StringCalTest.anyStr(StringCalTest.java:43)\n7) two(StringCalTest)\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.String.substring(String.java:1918)\n\tat StringCal.answer(StringCal.java:10)\n\tat StringCalTest.two(StringCalTest.java:23)\n8) newLine(StringCalTest)\njava.lang.AssertionError: expected:<6> but was:<5>\n\tat StringCalTest.newLine(StringCalTest.java:50)\n\nFAILURES!!!\nTests run: 8,  Failures: 8\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCal.java":"\npublic class StringCal{\n\n    public static int answer(String str) {\n        String delimiter = \",\";\n        if (str.startsWith(\"//\")){\n            delimiter = str.split(\"\\n\")[0].substring(2);\n            return 0;\n        }\n        return add(0, str.substring(2).replaceAll(\"\\n\",\",\").split(\",\"));  \n    }\n\n    private static int add(int sum, String[] ints) {\n        for (String i : ints) {\n            sum += \"\".equals(i) ? 0 : Integer.parseInt(i);\n        }\n        return sum;\n    }\n}\n","StringCalTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalTest {\n\n    @Test\n    public void zero() {\n        int expected = 0;\n        int actual = StringCal.answer(\"\");\n        assertEquals(expected, actual);\n    }\n\n\n    @Test\n    public void one() {\n        int expected = 1;\n        int actual = StringCal.answer(\"1\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void two() {\n        int expected = 2;\n        int actual = StringCal.answer(\"2\");\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void oneAnd() {\n        int expected = 1;\n        int actual = StringCal.answer(\"1,\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void spaceAndOne() {\n        int expected = 3;\n        int actual = StringCal.answer(\"1,2\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void anyStr() {\n        int expected = 10;\n        int actual = StringCal.answer(\"1,2,3,4\");\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void newLine() {\n        int expected = 6;\n        int actual = StringCal.answer(\"1\\n2,3\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void dynamicDelimiter() {\n        int expected = 6;\n        int actual = StringCal.answer(\"//?\\n1?2?3\");\n        assertEquals(expected, actual);\n    }\n}\n"}