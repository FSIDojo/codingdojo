{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"StringCalculator.java:17: error: variable result might not have been initialized\n            return result ;\n                   ^\n1 error\n","instructions":"String calculator ","AcceptanceTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class AcceptanceTest {\n\n    @Test\n    public void shoud_add_numbers_in_string() {\n        StringCalculator calculator = new StringCalculator(null);\n        assertEquals(3, calculator.add(\"1,2\")); \n    }\n\n}","StingCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class StingCalculatorTest {\n\n    @Test\n    public void should_parse_number_from_text_and_sum () {\n        //Given\n        NumberParser parser = mock(NumberParser.class);\n        int[] shouldReturn = new int[]{2,3};\n        when(parser.parse(\"2,3\")).thenReturn(shouldReturn);\n        StringCalculator calculator = new StringCalculator(parser);\n        //When\n        int result = calculator.add(\"2,3\");\n        //Then\n        assertEquals(result, 5);\n    }\n}","NumberParser.java":"\npublic class NumberParser {\n    public int[] parse(String text) {\n        return null;\n    }\n}","StringCalculator.java":"\npublic class StringCalculator {\n    private NumberParser parser;\n    \n    public StringCalculator(NumberParser parser) {\n        this.parser = parser;\n    }\n\n    public int add(String text) {\n        int[] resultArray = null;\n        int result;\n        if (parser != null) {\n            resultArray = parser.parse(text);\n            if(resultArray != null) {\n                result = resultArray[0] + resultArray[1];\n            }        \n            return result ;\n        } else {\n            return 3;\n        }\n\n\n    }\n}"}