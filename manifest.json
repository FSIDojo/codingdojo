{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.1\nE..1\n.2\n.3\n.3\n\nTime: 0.023\nThere was 1 failure:\n1) should_throw_exception_if_format_error(StringCalculatorTest)\njava.lang.Exception: Unexpected exception, expected<java.lang.NumberFormatException> but was<java.lang.AssertionError>\nCaused by: java.lang.AssertionError: should throw exception\n\tat StringCalculatorTest.should_throw_exception_if_format_error(StringCalculatorTest.java:34)\n\t... 23 more\n\nFAILURES!!!\nTests run: 6,  Failures: 1\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void should_return_zero_from_empty() {\n        assertEquals(0, StringCalculator.add(\"\"));\n    }\n\n    @Test\n    public void should_return_intvalue_from_single_string() {\n        assertEquals(2, StringCalculator.add(\"2\"));\n    }\n\n    @Test\n    public void should_return_sum_from_two_string() {\n        assertEquals(3, StringCalculator.add(\"1,2\"));\n    }\n\n    @Test\n    public void should_return_sum_from_multiple_string() {\n        assertEquals(6, StringCalculator.add(\"1,2,3\"));\n    }\n\n    @Test\n    public void should_accept_newline_as_sparator() {\n        assertEquals(6, StringCalculator.add(\"1\\n2,3\"));\n    }\n\n    @Test(expected=NumberFormatException.class)\n    public void should_throw_exception_if_format_error() {\n         int willFail = StringCalculator.add(\"1\\n,\");\n         fail(\"should throw exception\");\n    }\n}","StringCalculator.java":"\npublic class StringCalculator {\n\n    public static int add(String input) {\n        if (input.equals(\"\")) return 0;\n        if(input.contains(\",\\n\")){\n            throw new NumberFormatException(\"Format error\");\n        }\n        return addAll(input.split(\",|\\n\"));\n    }\n\n    private static int addAll(String... inputs){\n        int result = 0;\n        System.out.println(inputs.length);\n        for(String temp : inputs){\n            if(temp.equals(\"\")){\n                throw new NumberFormatException(\"Format error\");            \n            }\n            result += Integer.valueOf(temp);\n        }\n        return result;\n    }\n \n}\n"}