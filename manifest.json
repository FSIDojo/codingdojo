{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"StringCalculator.java:25: error: cannot find symbol\n                result += Integer.valueOf(i);\n                ^\n  symbol:   variable result\n  location: class StringCalculator\nStringCalculator.java:27: error: cannot find symbol\n            return result;\n                   ^\n  symbol:   variable result\n  location: class StringCalculator\n2 errors\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCalculator.java":"\npublic class StringCalculator {\n\n    public int add(String param) {\n        int result=0;\n        String delimiter = \",|\\n\";\n        if(param.startsWith(\"//\")){\n            delimiter = \";\";\n            param = \"1;3\";\n\n            return sumByDelimiter(param, delimiter);\n        }\n        if (!param.equals(\"\")) {\n            String[] digits = param.split(delimiter);\n            for(String i: digits){\n                result += Integer.valueOf(i);\n            }\n        }\n        return result;\n    }\n\n    private int sumByDelimiter(String numbers, String delimiter) {\n            String[] digits = numbers.split(delimiter);\n            for(String i: digits){\n                result += Integer.valueOf(i);\n            }\n            return result;\n    } \n}\n","StringCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalculatorTest {\n\n    @Test\n    public void empty_string_get_0() {\n        assertEquals(0, new StringCalculator().add(\"\"));\n    }\n\n    @Test\n    public void single_string_get_x() {\n        assertEquals(1, new StringCalculator().add(\"1\"));\n    }\n\n    @Test\n    public void two_string_get_x_add_y() {\n        assertEquals(3, new StringCalculator().add(\"1,2\"));\n    }\n\n    @Test\n    public void get_x_add_y_add_z_with_two_delimiter() {\n        assertEquals(6, new StringCalculator().add(\"1\\n2,3\"));\n    }\n\n    @Test\n    public void could_define_delimiter() {\n        assertEquals(4, new StringCalculator().add(\"//;\\n1;3\"));\n    }\n}\n"}