{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n...E...\nTime: 0.273\nThere was 1 failure:\n1) testParse2(NumberParserTest)\njava.lang.AssertionError: expected:<3> but was:<2>\n\tat org.junit.Assert.fail(Assert.java:92)\n\tat org.junit.Assert.failNotEquals(Assert.java:646)\n\tat org.junit.Assert.assertEquals(Assert.java:127)\n\tat org.junit.Assert.assertEquals(Assert.java:471)\n\tat org.junit.Assert.assertEquals(Assert.java:455)\n\tat NumberParserTest.testParse2(NumberParserTest.java:22)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 6,  Failures: 1\n","instructions":"String calculator ","AcceptanceTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class AcceptanceTest {\n\n    @Test\n    public void shoud_add_numbers_in_string() {\n        StringCalculator calculator = new StringCalculator(null);\n        assertEquals(4, calculator.add(\"1,3\")); \n    }\n\n}","StingCalculatorTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class StingCalculatorTest {\n\n    @Test\n    public void should_parse_number_from_text_and_sum () {\n//given\n        NumberParser parser = mock(NumberParser.class);\n        int[] a = {1,2};\n        when(parser.parse(\"1,2\")).thenReturn(a);\n        StringCalculator calculator = new StringCalculator(parser);\n//when\n        int result = calculator.add(\"1,2\");\n\n//then   \n        assertEquals(3, result);\n    }\n\n    \n    @Test\n    public void should_parse_number_from_text_and_sum2 () {\n//given\n        NumberParser parser = mock(NumberParser.class);\n        int[] a = {1,2,4};\n        when(parser.parse(\"1,2,4\")).thenReturn(a);\n        StringCalculator calculator = new StringCalculator(parser);\n//when\n        int result = calculator.add(\"1,2,4\");\n\n//then   \n        assertEquals(7, result);\n    }\n\n    @Test\n    public void should_parse_number_from_text_and_sum3 () {\n//given\n        NumberParser parser = mock(NumberParser.class);\n        int[] a = {};\n        when(parser.parse(\"\")).thenReturn(a);\n        StringCalculator calculator = new StringCalculator(parser);\n//when\n        int result = calculator.add(\"\");\n\n//then   \n        assertEquals(0, result);\n    }\n}\n","NumberParser.java":"\npublic class NumberParser {\n    public int[] parse(String text) {\n        String[] arr = text.split(\",\");\n        int result[] = new int[arr.length];\n        for(int i = 0; i < arr.length; i ++) {\n            result[i] = Integer.parseInt(arr[i]);\n        }\n        \n        return result;\n    }\n}","StringCalculator.java":"\npublic class StringCalculator {\n    private NumberParser parser;\n    \n    public StringCalculator(NumberParser parser) {\n        this.parser = parser;\n    }\n\n    public int add(String text) {\n        if (parser != null) {\n           int[] temp = parser.parse(text);\n            \n            int result = 0;\n            for(int a: temp) {\n                result += a;\n            }\n           return result; \n        }\n\n        return 4;\n    }\n}","NumberParserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class NumberParserTest {\n\n    @Test\n    public void testParse1() {\n//given\n        NumberParser parser = new NumberParser();\n        int[] result = parser.parse(\"1,2\");\n//then   \n        assertEquals(2, result.length);\n    }\n\n     @Test\n    public void testParse2() {\n//given\n        NumberParser parser = new NumberParser();\n        int[] result = parser.parse(\"1,2,\");\n//then   \n        assertEquals(3, result.length);\n    }\n\n}\n"}