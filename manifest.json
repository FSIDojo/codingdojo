{"output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.....E...\nTime: 0.024\nThere was 1 failure:\n1) dynamicDelimiter(StringCalTest)\njava.util.regex.PatternSyntaxException: Dangling meta character '?' near index 0\n?\n^\n\tat java.util.regex.Pattern.error(Pattern.java:1955)\n\tat java.util.regex.Pattern.sequence(Pattern.java:2123)\n\tat java.util.regex.Pattern.expr(Pattern.java:1996)\n\tat java.util.regex.Pattern.compile(Pattern.java:1696)\n\tat java.util.regex.Pattern.<init>(Pattern.java:1351)\n\tat java.util.regex.Pattern.compile(Pattern.java:1028)\n\tat java.lang.String.split(String.java:2367)\n\tat java.lang.String.split(String.java:2409)\n\tat StringCal.answer(StringCal.java:10)\n\tat StringCalTest.dynamicDelimiter(StringCalTest.java:55)\n\nFAILURES!!!\nTests run: 8,  Failures: 1\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n","StringCal.java":"\npublic class StringCal{\n\n    public static int answer(String str) {\n        String delimiter = \",\";\n        if (str.startsWith(\"//\")){\n            delimiter = str.substring(2,3);\n            str = str.split(\"\\n\")[1];\n        }\n        return add(0, str.replaceAll(\"\\n\",delimiter ).split(delimiter ));  \n    }\n\n    private static int add(int sum, String[] ints) {\n        for (String i : ints) {\n            sum += \"\".equals(i) ? 0 : Integer.parseInt(i);\n        }\n        return sum;\n    }\n}\n","StringCalTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class StringCalTest {\n\n    @Test\n    public void zero() {\n        int expected = 0;\n        int actual = StringCal.answer(\"\");\n        assertEquals(expected, actual);\n    }\n\n\n    @Test\n    public void one() {\n        int expected = 1;\n        int actual = StringCal.answer(\"1\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void two() {\n        int expected = 2;\n        int actual = StringCal.answer(\"2\");\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void oneAnd() {\n        int expected = 1;\n        int actual = StringCal.answer(\"1,\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void spaceAndOne() {\n        int expected = 3;\n        int actual = StringCal.answer(\"1,2\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void anyStr() {\n        int expected = 10;\n        int actual = StringCal.answer(\"1,2,3,4\");\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void newLine() {\n        int expected = 6;\n        int actual = StringCal.answer(\"1\\n2,3\");\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void dynamicDelimiter() {\n        int expected = 6;\n        int actual = StringCal.answer(\"//?\\n1?2?3\");\n        assertEquals(expected, actual);\n    }\n}\n"}