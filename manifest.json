{"RunCukesTest.java":"import cucumber.api.junit.Cucumber;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.SnippetType;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(strict=true, monochrome=true, format=\"junit:output\", snippets=SnippetType.CAMELCASE)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"SearchStepDef.java:18: error: cannot find symbol\n        SearchWorker worker = new SearchWorker();\n        ^\n  symbol:   class SearchWorker\n  location: class SearchStepDef\nSearchStepDef.java:18: error: cannot find symbol\n        SearchWorker worker = new SearchWorker();\n                                  ^\n  symbol:   class SearchWorker\n  location: class SearchStepDef\n2 errors\n","instructions":"A full text keywords translater \nthat translate user input to a engine recongized full text query","Search.feature":"\nFeature: search\n\nScenario: return all lines contains the user input words\nGiven the text content:\n    |One little, two little, three little Indians|\n    |Four little, five little, six little Indians|\n    |Seven little, eight little, nine little Indians|\n    |Ten little Indian boys.|\nWhen I search <Indian>\nThen the result will be: \n    |One little, two little, three little Indians|\n    |Four little, five little, six little Indians|\n    |Seven little, eight little, nine little Indians|\n    |Ten little Indian boys.|\n\n","SearchStepDef.java":"import java.util.*;\nimport org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.api.java.en.*;\nimport cucumber.api.*;\n\npublic class SearchStepDef {\n    List<String> results;\n\n    @Given(\"^the text content:$\")\n    public void theTextContent(List<String> text) throws Throwable {\n        \n    }\n    \n\n    @When(\"^I search <([^>]*)>$\")\n    public void iSearchIndian(String input) throws Throwable {\n        SearchWorker worker = new SearchWorker();\n        results = worker.search(input);\n    }\n  \n    @Then(\"^the result will be:$\")\n    public void theResultWillBe(List<String> result) throws Throwable {\n        assertEquals(4, result.size());\n    } \n}\n"}